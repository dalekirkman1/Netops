---
- name: NXOS Switch Upgrade
  hosts: nxos

  vars_prompt:
  # SWITCH VARS #
    - name: switch_username
      prompt: "switch username"
      private: no
    - name: switch_password
      prompt: "switch password"
      private: yes

  # UPGRADE VARS #
    - name: upgrade_nxos_firmware_filename
      prompt: "upgrade nxos firmware filename (xxxxxx.bin)"
      private: no
    - name: firmware_no_filetype
      prompt: "filename without filetype"
      private: no
    - name: md5_sum
      prompt: "md5sum of upgrade file"  
      private: no

  # SCP SERVER VARS #      
    - name: scp_ip_address
      prompt: "scp server IP address" 
      private: no
    - name: scp_user
      prompt: "scp server username" 
      private: no
    - name: scp_password
      prompt: "scp server password"
      private: yes
    - name: scp_file_location
      prompt: "filepath on scp server (include file to be copied)" 
      private: no

  # LOGGING VARS #
    - name: log_file_dir
      prompt: "directory to store logs" 
      private: no

  tasks:
    # 1.BACKUPS CONFIG #
    - name: run show running-config
      cisco.ios.ios_command:
        commands: 
        - show running-config
      register: config
   
    - name: save output to local directory
      copy:
        content: "{{ config.stdout | replace('\\n', '\n') }}"
        dest: "/tmp/Network/{{ inventory_hostname }}_running-config.ios"

    # 2.COPY NXOS UPGRADE FILE  #
    - name: initiate file copy from device
      cisco.nxos.nxos_file_copy:
        file_pull: true
        file_pull_protocol: scp
        local_file: "{{ firmware_nxos_filename }}"
        remote_file: "{{ scp_file_location }}"
        remote_scp_server: "{{ scp_ip_address }}"
        remote_scp_server_user: "{{ scp_user }}"
        remote_scp_server_password: "{{ scp_password }}"
        vrf: management

    # 3.CHECK MD5 #
    - name: Check MD5 Sum
      nxos_command:
        commands:
          - "show file bootflash:{{ upgrade_nxos_firmware_filename }} md5sum"
      register: output
 
    - name: Print MD5 As Calculated On The Switch
      debug: msg="{{output['results'][0]['stdout'][0]['file_content_md5sum'][:-1]}}"
    - name: Assert that MD5 on Switch Is Correct
      assert:
        that:
          - output['results'][0]['stdout'][0]['file_content_md5sum'][:-1] == "{{ md5_sum }}"
      with_items:
        - "{{ image }}"

    # 4.CHECK RUNNING NXOS VERSION #
    - name: Check running NXOS code version
      nxos_command:
        command: show version
      register: show_version

    # 5.CHECK FOR CONFIGURATION INCOMPATIBILITY #    
    - block:
      - name: Check for configuration incompatibility
          nxos_command:
            command: "show incompatibility-all nxos bootfalsh:{{ firmware_nxos_filename }}"
            register: nxos_incompatibility
          - name: Fail if incompatibilities are detected.
            fail:
              msg: "Incompatibilites detected in firmware upgrade: {{ nxos_incompatibility.response[0].body.TABLE_incompat_all.ROW_incompat_all }}"
            when: (firmware_nxos_filename != "{{ show_version.response[0].body.kick_file_name | basename }}") and
          (nxos_incompatibility.response[0].body.TABLE_incompat_all.ROW_incompat_all[1].Str1 != "No incompatible configurations")

    # 6.UPGRADE #
        - name: Upgrade NXOS firmware (this may take an extended period of time.)
          nxos_install_os:
            system_image_file: "{{ upgrade_nxos_firmware_filename }}"
            issu: desired
        - name: Device rebooting to apply new image
          wait_for:
            port: 22
            state: started
            timeout: 500
            delay: 60
            host: "{{ inventory_hostname }}"
        - name: Confirm installed version
          nxos_command:
            commands: [show version | json]
            provider: "{{ connection }}"
          register: output
        - assert:
            that:
            - output['stdout'][0]['kickstart_ver_str'] == "{{ firmware_no_filetype }}"
 


